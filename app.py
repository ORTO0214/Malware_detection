from flask import Flask
from flask import render_template
from waitress import serve
app = Flask(__name__)

@app.route('/')
def hello_pybo():
    return 'AVA,Test Web!!!!'

# SelectFile 이라는 URL이 실행되면 아래의 함수 실행
@app.route("/SelectFile")
def select_file():
    # templates 폴더의 SelectFile.html을 실행
    return render_template('SelectFile.html')



from flask import request
import boto3
from os import path

# UploadFile URL이 실행될 때 아래의 함수 실행
# methods=['POST'] : SelectFile.html 페이지에서 전송 버튼을 클릭했을 때만 실행

@app.route('/UploadFile', methods=['POST'])
def upload_file():
    # SelectFile.html 페이지에서 전송 버튼을 클릭했을때 method의 값이 POST
    if request.method == 'POST':
        # request.files['select'] : name 속성의 값이 select인 파일 선택 버튼에서 선택한 파일 정보를 리턴
        file = request.files['select']
        # 선택한 파일의 이름을 리턴
        print("선택한 파일 이름 =", file.filename)
        # 선택한 파일이 존재 한다면
        if file.filename != '':
            # 선택한 파일의 이름을 save_file에 대입
            save_file_name = file.filename
            # 업로드할 파일이 이미 존재할 때 파일명에 붙일 번호
            count = 1
            # path.exists("./temporary/"+save_file_name) : temporary 폴더에 save_file_name과 같은 이름의
            # 파일이 이미 존재 한다면 True를 리턴하고 반복문 안의 내용이 실행됨
            # 같은 이름의 파일이 존재하지 않는다면 False를 리턴하고 반복문의 내용은 실행 안됨
            while path.exists("./temporary/"+save_file_name):
                # 이미 존재하는 파일이라는 메시지 출력
                print(save_file_name+" 은 이미 존재하는 파일")
                # path.splitext(save_file_name) : 파일 이름을 파일명과 확장자 명으로 분리한 후 리스트에 담아서 리턴
                #                                 save_file_name 이 blog.txt 라면
                #                                 파일명과 확장자 명으로 분리한 후 리스트 ['blog','text']가 리턴됨

                # len()  : 리스트에 담긴 데이터의 개수를 리턴함
                #        : 리스트에 ['blog','text'] 이렇게 2개의 데이터가 저장돼 있을때
                #          len(['blog','text']) 함수는 데이터의 개수 2를 리턴함
                if len(path.splitext(save_file_name)) == 2:
                    # path.splitext(save_file_name) 의 리턴값을 순서대로 file_name, ext에 순서대로 저장
                    # path.splitext(save_file_name) 의 리턴값이 ['blog', 'text']라면
                    # file_name에는 "blog", ext에는 "txt"가 저장됨
                    file_name, ext = path.splitext(save_file_name)
                else:
                    # 확장자가 없는 경우에
                    # file_name에 save_file_name 대입
                    file_name = save_file_name
                    ext = ""

                print("file_name =", file_name)
                print("ext =", ext)
                # 같은 이름의 파일이 존재하기 때문에
                # file_name (확장자를 제외한 파일 이름) + str(count)(count를 문자열로 변환) + ext(확장자)
                # 를 save_file_name에 대입
                save_file_name = file_name+str(count)+ext
                print("save_file_name =", save_file_name)
                count = count +1

            # file (SelectFile.html 에서 선택한 파일) 을 temporary 폴더에 save_file_name 파일명으로 임시 저장
            file.save("./temporary/"+save_file_name)
            # AWS 의 s3에 접속
            s3 = boto3.client('s3')

            # AWS s3에 파일 업로드
            # 첫번째 매개 변수 : 로컬에서 올릴 파일이름 file.filename (업로드한 파일의 원래 이름)
            # 두번째 매개 변수 : s3 버킷 이름 ( 본인의 버켓 이름을 입력할 것)
            # 세번째 매개 변수 : 버킷에 저장될 파일 이름. ( 업로드한 파일의 원래 이름)
            s3.upload_file("./temporary/"+save_file_name, 'shielders-ava', save_file_name)
            return save_file_name + " 파일이 s3로 업로드 되었습니다"

    return "s3에 파일 업로드 실패!!"

@app.route('/ViewFileList')
def view_file_list():
    # AWS의 s3에 접속
    s3 = boto3.client('s3')
    # s3.get_paginator('list_objects_v2') : s3에 저장한 파일 리스트를 가져올 객체 생성해서 리턴
    paginator = s3. get_paginator('list_objects_v2')
    # paginator.paginate( Buket =  '본인 s3 버켓이름') : s3 버켓에 업로드한 파일의 정보를 리턴 (Iterator 타입의 객체)
    #                                                 한번에 50개 파일 정보씩 저장돼 있음
    #
    response_iterator = paginator.paginate(
                                Bucket='shielders-ava'
                                )
    # list(response_iterator) : s3 버켓에 저장된 파일의 정보가 저장된 response_iterator (Iterator 타입 객체)를 list 객체로 변환
    #                           리스트에 파일정보는 50개씩 다음과 같이 저장돼 있음
    #                          [
    #                               { "Contents" : [파일1 정보, 파일2 정보, ...... 파일 50 정보] },  <== [0]
    #                               { "Contents" : [파일 51정보, 파일 52정보, ..... 파일 100 정보] }, <== [1]
    #                              ...]
    file_list = list(response_iterator)
    print("="*100)
    print("file_list =", file_list)
    print("="*100)
    # file_list[0] : 맨처음 50개의 파일정보를 리턴 (리턴타입 Dictionary)
    # { "Contents": [파일1 정보, 파일2 정보, ...... 파일 50 정보] }, <== [0]
    print("file_list[0] =", file_list[0])
    print("=" * 100)
    # 파일 정보가 저장된 Contents 정보를 리턴
    print("file_list[0][Contents] =", file_list[0]["Contents"])
    print("=" * 100)
    # render_template('ViewFileList.html' : ViewFileList.html 을 실행
    # file_list = file_list[0]["Contents"] : ViewFileList.html로
    #                                       업로드한 파일의 정보가 저장된 file_list[0]["Contents"] 를 전송
    return render_template('ViewFileList.html', file_list=file_list[0]["Contents"])


from flask import Response
import urllib
# @app.route('/DownLoadFile', : DownLoadFile URL 이 실행될 때 아래의 함수 실행
# methods = ['POST'] : input type="submit" 인 버튼을 클릭했을 때 실행
@app.route('/DownLoadFile', methods=['POST'])
def download_file():
    # request.form['file_name'] : input name="file_name" 의 value 속성의 값을 리턴
    #                           : 선택한 파일의 이름
    file_name = request.form['file_name']
    print("file_name =", file_name)
    print("="*100)

    # boto3.client('s3') : AWS s3 에 접속하는 객체를 생성해서 리턴
    s3 = boto3.client('s3')
    # s3.get_object(Bucket='버켓이름', Key=file_name) : 버캣에서 파일명이 file_name 인 파일의 내용을 읽어올 객체를 생성해서 리턴
    # file : 버켓에서 파일명이 file_name 인 파일의 내용을 AWS s3 버켓에서 가져올 객체
    file = s3.get_object(Bucket='shielders-ava', Key=file_name)
    print("file =", file)
    print("="*100)
    # urllib.parse.quote(file_name.encode('utf-8') : file_name (전송할 파일의 파일명)을 UTF-8 로 변환
    filename_header = 'filename*=UTF-8\'\'%s' % urllib.parse.quote(file_name.encode('utf-8'))
    print("filename_header = ", filename_header)

    # file : AWS s3 버켓에서 파일명이 file_name 인 파일의 내용을 가져올 객체
    # file['Body'].read() : AWS s3 버켓에서 파일명이 file_name 인 파일의 내용을 가져옴
    # headers={"Content-Disposition": "attachment;file_name} : 다운로드 할 파일의 이름
    # Response( 웹 브라우저로 전송할 내용) : 웹 브라우저로 AWS s3 버켓에서 파일명이 file_name 인 파일의 내용을 전송 (파일 내용 다운로드 시작)
    return Response(
        file['Body'].read(),
        headers={"Content-Disposition": 'attachment;'+filename_header }
    )



serve(app, host='0.0.0.0', port=8081)