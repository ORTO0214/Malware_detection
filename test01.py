from flask import Flask
from flask import render_template
from waitress import serve
from flask import request
import boto3
from os import path
app = Flask(__name__)

@app.route('/')
def hello_pybo():
    return 'AVA,Test Web!!!!'


@app.route("/Checkfile")
def check_file():
    # templates 폴더의 Checkfile.html을 실행
    return render_template('Checkfile.html')


@app.route("/UploadFile", methods=['POST'])
def upload_file():
    # SelectFile.html 페이지에서 전송 버튼을 클릭했을때 method의 값이 POST
    if request.method == 'POST':
        # request.files['select'] : name 속성의 값이 select인 파일 선택 버튼에서 선택한 파일 정보를 리턴
        file = request.files['select']

        print("선택한 파일 이름 =", file.filename)
        # 선택한 파일이 존재 한다면
        if file.filename != '':

            save_file_name = file.filename
            count = 1
            # path.exists("./temporary/"+save_file_name) : temporary 폴더에 save_file_name과 같은 이름의
            # 파일이 이미 존재 한다면 True를 리턴하고 반복문 안의 내용이 실행됨
            # 같은 이름의 파일이 존재하지 않는다면 False를 리턴하고 반복문의 내용은 실행 안됨
            while path.exists("./temporary/"+save_file_name):

                # path.splitext(save_file_name) : 파일 이름을 파일명과 확장자 명으로 분리한 후 리스트에 담아서 리턴
                #                                 save_file_name 이 blog.txt 라면
                #                                 파일명과 확장자 명으로 분리한 후 리스트 ['blog','text']가 리턴
                if len(path.splitext(save_file_name)) == 2:
                    file_name, ext = path.splitext(save_file_name)

                else:
                    file_name = save_file_name
                    ext = ""


                # file_name (확장자를 제외한 파일 이름) + str(count)(count를 문자열로 변환) + ext(확장자)
                save_file_name = file_name+str(count)+ext
                # print("save_file_name =", save_file_name)
                count = count + 1

            # file (SelectFile.html 에서 선택한 파일) 을 temporary 폴더에 save_file_name 파일명으로 임시 저장
            file.save("./temporary/"+save_file_name)
            # AWS 의 s3에 접속
            s3 = boto3.client('s3')

            # AWS s3에 파일 업로드
            # 첫번째 매개 변수 : 로컬에서 올릴 파일이름 file.filename (업로드한 파일의 원래 이름)
            # 두번째 매개 변수 : s3 버킷 이름 ( 본인의 버켓 이름을 입력할 것)
            # 세번째 매개 변수 : 버킷에 저장될 파일 이름. ( 업로드한 파일의 원래 이름)
            s3.upload_file("./temporary/"+save_file_name, 'shielders-ava', save_file_name)
            return save_file_name + " 파일이 s3로 업로드 되었습니다"

    return "s3에 파일 업로드 실패!!"


if __name__ == '__main__':
    app.run(debug=False)